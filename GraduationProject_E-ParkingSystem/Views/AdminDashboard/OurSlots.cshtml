@{
	ViewData["Title"] = "OurSlots";
	Layout = "_AdminLayout";
	int count = 0;
}
@model SlotsViewModel

<style>
	#successMessage {
		transition: opacity 0.5s ease-in-out;
	}

</style>

<h4 class="page-title" style="font-weight: 900; font-size: 27px;">Slots Management</h4>
<div class="changableButtons">
	<button class="btn btn-primary active" id="btnShowCars" onclick="showTable('Car-table', this)">Show Cars Slots</button>
	<button class="btn btn-primary" id="btnShowBuses" onclick="showTable('Bus-table', this)">Show Buses Slots</button>
</div>


<div id="Car-table" class="card" style="display: block; ">
	<div class="card-header" style="display: flex; justify-content: space-between">
		<div class="card-title">Car Slots Table</div>
		<div class="card-title">
			@* <button class="new" id="addSlotBtn"> *@
			<button class="new" id="MyAddBtn" onclick="openModal('car')">
				Add New Slot <i class="fa-solid fa-plus"></i>
			</button>

		</div>
	</div>
	<div class="card-body">
		<div class="card-sub">
			Here all the slots that <span style="color: red">cars</span> can use
		</div>
		<div class="table-responsive">
			<table id="Car-table" class="table table-bordered" style="text-align: center">
				<thead>
					<tr>
						<th>#</th>
						<th>Slot Name</th>
						<th>Location</th>
						<th>Available?</th>
						<th>Update</th>
						<th>Delete</th>
					</tr>
				</thead>
				<tbody>
					@{
						List<ParkingSpots> BusParkingSpots = Model.parkingSpots
						.Where(p => p.SlotName.Contains("B"))
						.OrderBy(p =>
						{
							// استخراج الرقم من SlotName
							var numberPart = new string(p.SlotName.SkipWhile(c => !char.IsDigit(c)).ToArray());

							// تحويل الرقم المستخرج إلى قيمة عددية إذا كان موجودًا
							return int.TryParse(numberPart, out int num) ? num : int.MaxValue;
						})
						.ToList();

						List<ParkingSpots> CarParkingSpots = Model.parkingSpots
						.Where(p => p.SlotName.Contains("C"))
						.OrderBy(p =>
						{
							// استخراج الرقم من SlotName
							var numberPart = new string(p.SlotName.SkipWhile(c => !char.IsDigit(c)).ToArray());

							// تحويل الرقم المستخرج إلى قيمة عددية إذا كان موجودًا
							return int.TryParse(numberPart, out int num) ? num : int.MaxValue;
						})
						.ToList();

					}
					@foreach (var slot in CarParkingSpots)
					{
						@*
					if (slot.SlotName.Contains("C"))
					{ *@
						{
							count++;
						}
						<tr id="row-@slot.Id">
							<th scope="row">@count</th>
							<td id="slot-name-@slot.Id">@slot.SlotName</td>
							<td>
								<a href="javascript:void(0)" class="location-link">
									<i class="fa-solid fa-location-dot"></i>
								</a>
							</td>


							<td>
								@if (slot.Isbooked || !slot.IsAvailable)
								{
									<i class="fa-solid fa-x text-danger"></i> <!-- Red X for unavailable -->
								}
								else
								{
									<i class="fa-solid fa-check text-success"></i> <!-- Green check for success -->
								}
							</td>
							<td>
								@if (slot.Isbooked || !slot.IsAvailable)
								{
									<button type="button" disabled class="btn btn-warning">Update</button>
								}
								else
								{
									@* 										<button type="button" class="btn btn-warning" onclick="openUpdateWindow(@slot.Id, '@slot.SlotName')">Update</button>
							*@
									@* <button type="button" class="btn btn-warning" onclick="openUpdateWindow(@slot.Id)">Update</button> *@

									<button type="button" class="btn btn-warning" onclick="openUpdateWindow(@slot.Id, 'car')">Update</button>

									@* <a asp-action="WindowForUpdateTheSlot" asp-controller="AdminDashboard"><button type="button" class="btn btn-warning">Update</button></a> *@
								}

							</td>
							<td>
								@if (slot.Isbooked || !slot.IsAvailable)
								{
									<button type="button" disabled class="btn btn-danger">Delete</button>
								}
								else
								{
									@* <a asp-action="DeleteSlot" asp-controller="AdminDashboard" asp-route-Id="@slot.Id"><button type="submit" class="btn btn-danger">Delete</button></a> *@
									@* 	<a href="javascript:void(0);" onclick="saveScrollPositionAndDelete(@slot.Id)">
							<button type="submit" class="btn btn-danger">Delete</button>
							</a> *@
									@* <button type="button" class="btn btn-danger" onclick="deleteSlot(@slot.Id, this)">Delete</button> *@
									<button type="button" class="btn btn-danger" onclick="showDeleteModal(@slot.Id, this)">Delete</button>
								}

							</td>
						</tr>
						@* } *@
					}
				</tbody>
			</table>
		</div>
	</div>
</div>


<div id="Bus-table" class="card" style="display: none">
	<div class="card-header" style="display:flex; justify-content: space-between">
		<div class="card-title">
			Bus Slots Table
		</div>
		@* <button class="new" id="addSlotBtnbus"> *@
		<button class="new" id="Myaddslotbus" onclick="openModal('bus')">

			Add New Slot <i class="fa-solid fa-plus"></i>
		</button>
	</div>
	<div class="card-body">
		<div class="card-sub">
			Here all the slots that <span style="color: red">buses</span> can use
		</div>
		<div class="table-responsive">
			<table class="table table-bordered" style="text-align: center">
				<thead>
					<tr>
						<th>#</th>
						<th>Slot Name</th>
						<th>Location</th>
						<th>Available?</th>
						<th>Update</th>
						<th>Delete</th>
					</tr>
				</thead>
				<tbody>
					@{
						count = 0;
					}
					@foreach (var slot in BusParkingSpots)
					{

						@* @if (slot.SlotName.Contains("B"))
					{ *@
						{
							count++;
						}
						<tr id="row-@slot.Id">
							<th scope="row">@count</th>
							<td id="slot-name-@slot.Id">@slot.SlotName</td>
							<td>
								<a href="javascript:void(0)" class="location-link">
									<i class="fa-solid fa-location-dot"></i>
								</a>
							</td>

							<td>
								@if (slot.Isbooked || !slot.IsAvailable)
								{
									<i class="fa-solid fa-x text-danger"></i> <!-- Red X for unavailable -->
								}
								else
								{
									<i class="fa-solid fa-check text-success"></i> <!-- Green check for success -->
								}
							</td>
							<td>
								@if (slot.Isbooked || !slot.IsAvailable)
								{
									<button type="button" disabled class="btn btn-warning">Update</button>
								}
								else
								{
									@* <button type="button" class="btn btn-warning" onclick="openUpdateWindow(@slot.Id)">Update</button> *@

									<button type="button" class="btn btn-warning" onclick="openUpdateWindow(@slot.Id, 'bus')">Update</button>

									@* <a asp-action="WindowForUpdateTheSlot" asp-controller="AdminDashboard"><button type="button" class="btn btn-warning">Update</button></a> *@
								}

							</td>
							<td>
								@if (slot.Isbooked || !slot.IsAvailable)
								{
									<button type="button" disabled class="btn btn-danger">Delete</button>
								}
								else
								{
									@* <a asp-action="DeleteSlot" asp-controller="AdminDashboard" asp-route-Id="@slot.Id"><button type="submit" class="btn btn-danger">Delete</button></a> *@
									@* 	<a href="javascript:void(0);" onclick="saveScrollPositionAndDelete(@slot.Id)">
							<button type="submit" class="btn btn-danger">Delete</button>
							</a> *@
									@* <button type="button" class="btn btn-danger" onclick="deleteSlot(@slot.Id, this)">Delete</button> *@
									<button type="button" class="btn btn-danger" onclick="showDeleteModal(@slot.Id, this)">Delete</button>

								}

							</td>
						</tr>
						@* } *@
					}
				</tbody>
			</table>
		</div>
	</div>
</div>


@* <!-- Add Slot Modal -->
<div class="modal fade" id="addSlotModal" tabindex="-1" aria-labelledby="addSlotModalLabel" aria-hidden="false">
	<div class="modal-dialog">
		<div class="modal-content">
			<div class="modal-header">
				<h5 class="modal-title" id="addSlotModalLabel">Add New Slot</h5>
				<button type="button" id="removing" class="close" data-dismiss="modal" onclick="removevalue()">&times;</button>
			</div>
			<div class="modal-body">
				<label for="slotNameInputforadd" class="form-label">Slot Name:</label>
				<input type="text" class="form-control" id="slotNameInputforadd" placeholder="Enter slot name">
				<div id="nameValidationMessage" class="text-danger mt-2"></div>
			</div>
			<div class="modal-footer">
				<button type="button" class="btn btn-secondary" onclick="removevalue()" data-dismiss="modal">Close</button>
				<button type="button" class="btn btn-primary" id="saveSlotBtn">Save Slot</button>
			</div>
		</div>
	</div>
</div> *@

<!-- add Modal -->
<div class="modal fade" id="addSlotModal" tabindex="-1" aria-labelledby="addSlotModalLabel" aria-hidden="true">
	<div class="modal-dialog modal-fullscreen">
		<div class="modal-content">
			<div class="modal-header">
				<h5 class="modal-title" id="addSlotModalLabel">Add New Slot</h5>
				<button type="button" class="close" id="closeXBtn" data-dismiss="modal" onclick="clearInput()">×</button>
			</div>
			<div class="modal-body">
				<label class="form-label">Choose Type:</label>
				<div class="btn-group w-100 mb-3">
					<button type="button" class="btn btn-outline-primary w-50" id="btnCar" onclick="setType('car')">Car 🚗</button>
					<button type="button" class="btn btn-outline-danger w-50" id="btnBus" onclick="setType('bus')">Bus 🚌</button>
				</div>
				<label for="slotNameInputforadd" class="form-label">Slot Name:</label>
				<input type="text" class="form-control" id="slotNameInputforadd" placeholder="Enter slot name" oninput="validateInput()" autocomplete="off">
				

				<!-- New Google Maps link input -->
				<label for="mapLinkInput" class="form-label mt-3">Location:</label>
				<input type="url" class="form-control" id="mapLinkInput" placeholder="Paste Google Maps link here" autocomplete="off">
				<div id="nameValidationMessage" class="text-danger mt-2"></div>
				<div id="name_Success_Message" class="text-danger mt-2"></div>
				<div id="successMessageDiv" class="alert alert-success d-none mt-2"></div>
				<div id="successMessageDiv" class="alert alert-success d-none mt-2"></div>
			</div>
			<div class="modal-footer">
				<button type="button" class="btn btn-secondary" id="closeFooterBtn" data-dismiss="modal">Close & Refresh</button>
				<button type="button" class="btn btn-primary" id="saveSlotBtn" onclick="submitSlot()">Save Slot</button>
			</div>
		</div>
	</div>
</div>


<!--Update Slot Model-->
<div class="modal fade" id="updateSlotModal" tabindex="-1" role="dialog">
	<div class="modal-dialog" role="document">
		<div class="modal-content">
			<div class="modal-header">
				<h5 class="modal-title">Update Slot - <span id="nnn" style="color: red"></span></h5>
				<span id="testtype" hidden></span>
				<input type="hidden" id="originalSlotName"/>
				@* <input type="hidden" id="originalSlotName" asp-for="@Model.parkingspot.SlotName" value="@Model.parkingspot.SlotName" /> *@
				<button type="button" class="close" data-dismiss="modal">&times;</button>
			</div>
			<div class="modal-body">
				<form id="updateForm" method="post" asp-action="WindowForUpdateTheSlot" asp-controller="AdminDashboard">
					<input type="hidden" name="Id" id="slotIdInput">

					<div class="form-group">
						<label>Slot Name</label>
						<input type="text" class="form-control" name="SlotName" id="slotNameInput" required autocomplete="off">
						<div style="margin-top: 4px; color: red;">
							<span id="nameValidationMessageu"></span>
						</div>
					</div>

					<button type="submit" class="btn btn-success" id="mybt">Save Changes</button>
				</form>

			</div>
		</div>
	</div>
</div>


<!-- Delete Confirmation Modal -->
<div class="modal fade" id="deleteConfirmModal" tabindex="-1" aria-labelledby="deleteConfirmModalLabel" aria-hidden="true">
	<div class="modal-dialog modal-dialog-centered">
		<div class="modal-content">
			<div class="modal-header">
				<h5 class="modal-title" id="deleteConfirmModalLabel">Confirm Deletion</h5>
				<button type="button" class="close" data-dismiss="modal" aria-label="Close">
					<span aria-hidden="true">&times;</span>
				</button>
			</div>
			<div class="modal-body text-center">
				<p>Are you sure you want to delete this slot?</p>
				<button id="confirmDeleteBtn" class="btn btn-danger">Yes, Delete</button>
				<button type="button" class="btn btn-secondary" data-dismiss="modal">Cancel</button>
			</div>
		</div>
	</div>
</div>




<button id="scroll" onclick="upScroll()"><i class="fa-solid fa-arrow-up"></i></button>

<style>
	body {
		/* height: 2000px */
	}

	.changableButtons {
		display: flex;
		justify-content: space-between;
		height: 6vh;
		width: 100%;
		text-align: center;
		margin-bottom: 20px;
	}

		.changableButtons button {
			width: 40%;
			border-radius: 20px;
			font-size: 20px;
		}

		.changableButtons .btn {
			background-color: white !important;
			color: #0057b4;
			border: 3px solid #007bff;
	@* background-color: #007bff; /* Default Blue */ border: 3px solid #007bff; color: white; border: none; *@ transition: all 0.5s;
		}

			.changableButtons .btn:hover {
				transform: scale(1.02);
	@* background-color: #ebebeb !important; *@ border-color: black !important;
				color: black;
			}

			.changableButtons .btn.active {
	@* background-color: white !important; /* Green for Active */ color: #0057b4 !important; border: 3px solid #007bff; *@ background-color: #007bff !important; /* Default Blue */
				border: 3px solid #007bff !important;
				color: white !important;
				border: none !important;
			}

	.new {
		border: 2px solid darkblue;
		border-radius: 20px;
		padding: 5px;
		width: 200px; /* Default width */
		max-width: 100%; /* Ensures it shrinks on smaller screens */
		background-color: darkblue !important;
		color: white;
		font-weight: bold;
		cursor: pointer;
		transition: all 0.5s;
		font-size: 17px;
		height: 40px;
	}


		.new:hover {
			transform: scale(1.02);
			background-color: transparent !important;
			color: black;
			border-color: black !important
		}

	#scroll {
		position: fixed;
		bottom: 40px;
		right: 10px;
		width: 40px;
		border-radius: 10px;
		text-align: center;
		background-color: black;
		color: white;
		border: 2px solid black;
		display: none;
		cursor: pointer;
		transition: all 0.5s;
		opacity: 0.8;
	}


		#scroll:hover {
			background: #444; /* أفتح شوية */
			transform: scale(1.1); /* تكبير بسيط */
		}


		/*Comment dool law 3ayed tragahom*/
	thead {
		position: sticky;
		top: -1px;
		background-color: white;
		z-index: 1;
	}

		thead th {
			box-shadow: 0 2px 5px rgba(0,0,0,0.1);
			background-color: #f8f9fa; /* لون خفيف */
		}
	.table-responsive {
		max-height: 500px;
		overflow-y: auto;
		position: relative;
	}
	@@media(max-width: 600px) {
		.changableButtons {
			display: block;
			margin-bottom: 70px;
		}

			.changableButtons button {
				width: 90%;
				margin: 3px;
			}
	}

	@@media(max-width: 320px) {
		.new {
			width: 100%; /* Shrinks but keeps a relative size */
			font-size: 12px;
		}
	}
</style>


<script src="~/MyJs/newjs.js"></script>
<script>
	let successTimeoutId = null;

	function submitSlot() {

		let slotNameInput = document.getElementById("slotNameInputforadd");
		let successMessageDiv = document.getElementById("name_Success_Message");
		if (!slotNameInput || !successMessageDiv) {
			console.error("❌ عنصر غير موجود:", { slotNameInput, successMessageDiv });
			return;
		}

		let slotName = slotNameInput.value.trim();

		if (!slotName) {
			console.warn("⚠️ Slot name is required.");
			return;
		}

		let xhr = new XMLHttpRequest();
		xhr.open("POST", "/AdminDashboard/AddNewSlot", true);
		xhr.setRequestHeader("Content-Type", "application/json");

		xhr.onload = function () {
			console.log("📩 Raw Response:", xhr.responseText);

			if (xhr.status === 200) {
				try {
					let result = JSON.parse(xhr.responseText);
					console.log("✅ Parsed JSON:", result);

					if (result.success) {
						// مسح الإدخال
						slotNameInput.value = "";

						// عرض رسالة النجاح
						successMessageDiv.innerHTML = `✅ <span style="color: green;">Slot "${result.slotName}" added successfully!</span>`;
						successMessageDiv.classList.remove("d-none");

						if (successTimeoutId) {
							clearTimeout(successTimeoutId);
						}

						// ⏱️ ابدأ تايمر جديد
						successTimeoutId = setTimeout(() => {
							successMessageDiv.classList.add("d-none");
							successTimeoutId = null;
						}, 5000);

					} else {
						console.error("❌ Server error:", result.message);
					}
				} catch (error) {
					console.error("❌ JSON Parsing Error:", error);
				}
			} else {
				console.error("❌ Request failed. Status:", xhr.status);
			}
		};

		xhr.onerror = function () {
			console.error("❌ Network error.");
		};

		let formData = JSON.stringify({ parkingspot: { SlotName: slotName } });
		xhr.send(formData);
	}

			// 🧠 الحروف المسموح بيها
		const allowedLetters = {
		car: ['C'],
		bus: ['B']
	};

	document.addEventListener("DOMContentLoaded", function () {
		let slotInput = document.getElementById("slotNameInputforadd");
		let errorMessage = document.getElementById("nameValidationMessage");
		let btn = document.getElementById("saveSlotBtn");

		let btnCar = document.getElementById("btnCar");
		let btnBus = document.getElementById("btnBus");

		function validateSlot() {
			let slotName = slotInput.value.trim().toUpperCase();
			slotInput.value = slotName;

			let currentType = btnCar.classList.contains("btn-primary") ? "car" : "bus";

			const firstLetter = slotName.charAt(0);
			const rest = slotName.slice(1);

			errorMessage.textContent = "";

			if (slotName === "") {
				errorMessage.textContent = "Slot name cannot be empty.";
				btn.disabled = true;
				return;
			}

			if (!/^[A-Z]/.test(firstLetter)) {
				errorMessage.textContent = "Slot name must start with a capital letter.";
				btn.disabled = true;
				return;
			}

			// 🔥 تحقق إن أول حرف موجود في اللي انت محدده
			if (!allowedLetters[currentType].includes(firstLetter)) {
				errorMessage.textContent = `Invalid starting letter. Use only: ${allowedLetters[currentType].join(", ")}`;
				btn.disabled = true;
				return;
			}

			// 🔢 تحقق إن باقي الاسم أرقام
			if (!/^\d+$/.test(rest)) {
				errorMessage.textContent = "Slot name must be followed by numbers only.";
				btn.disabled = true;
				return;
			}

			// ✅ لو كل حاجة تمام، كمل التحقق من السيرفر
			if (typeof abortController === "undefined") {
				abortController = new AbortController();
			}

			abortController.abort();
			abortController = new AbortController();

			fetch(`/AdminDashboard/CheckSlotName?name=${encodeURIComponent(slotName)}&id=0`, {
				signal: abortController.signal
			})
				.then(response => {
					if (!response.ok) {
						throw new Error(`HTTP error! Status: ${response.status}`);
					}
					return response.json();
				})
				.then(data => {
					if (data.exists) {
						errorMessage.textContent = "This slot name is already taken.";
						btn.disabled = true;
					} else {
						errorMessage.textContent = "";
						btn.disabled = false;
					}
				})
				.catch(error => {
					if (error.name !== "AbortError") {
						console.error("❌ Error checking slot name:", error);
						errorMessage.textContent = "Error checking name. Try again.";
						btn.disabled = true;
					}
				});
		}

		slotInput.addEventListener("input", validateSlot);
	});

	function openUpdateWindow(slotId, type) {
		console.log("openUpdateWindow called with slotId:", slotId);

		let currentType = type;
		console.log("currentType set to:", currentType);

		// Update the "testtype" paragraph with the type
		document.getElementById("testtype").textContent = currentType;

		let nameCell = document.getElementById(`slot-name-${slotId}`);

		let slotName = nameCell ? nameCell.textContent.trim() : '';

		if (!nameCell) {
			console.error(`❌ Slot name cell not found for ID: ${slotId}`);
			return;
		}

		// Log the slot information
		console.log("🚀 Opening Modal with ID:", slotId, "Name:", slotName, "type:", currentType);

		document.getElementById("slotIdInput").value = slotId;
		document.getElementById("slotNameInput").value = slotName;
		document.getElementById("originalSlotName").value = slotName; // ✅ إضافة الاسم الأصلي
		document.getElementById("nnn").textContent = slotName || "Unknown Slot";
		document.getElementById("nameValidationMessageu").textContent = '';
		document.getElementById("mybt").disabled = false;
		$("#updateSlotModal").modal("show");
	}

	document.addEventListener("DOMContentLoaded", function () {
		let slotInput = document.getElementById("slotNameInput");
		let errorMessage = document.getElementById("nameValidationMessageu");
		let btn = document.getElementById("mybt");
		let slotId = document.getElementById("slotIdInput").value;
		let abortController;

		// دالة التحقق من الاسم في التعديل
		function validateSlotUpdate() {
			let slotName = slotInput.value.trim().toUpperCase();
			slotInput.value = slotName;
			let currentType = document.getElementById("testtype") ? document.getElementById("testtype").textContent.toLowerCase() : "";
			let originalName = document.getElementById("originalSlotName").value.trim(); // ✅ الاسم الأصلي
			let validFormat = /^[A-Z]\d+$/;
			let firstLetter = slotName.charAt(0).toUpperCase();

			errorMessage.textContent = "";

			if (slotName === "") {
				errorMessage.textContent = "Slot name cannot be empty.";
				btn.disabled = true;
				return;
			}

			// 🔥 تحقق إن أول حرف موجود في اللي انت محدده
			if (currentType === "car" && !allowedLetters.car.includes(firstLetter)) {
				errorMessage.textContent = `Allowed letters for car: ${allowedLetters.car.join(", ")}`;
				btn.disabled = true;
				return;
			}

			if (currentType === "bus" && !allowedLetters.bus.includes(firstLetter)) {
				errorMessage.textContent = `Allowed letters for bus: ${allowedLetters.bus.join(", ")}`;
				btn.disabled = true;
				return;
			}

			if (currentType === "bus" && !validFormat.test(slotName)) {
				// اختيار حرف عشوائي من الحروف المسموح بها للباص
				let example = allowedLetters.bus.length === 1 ? `${allowedLetters.bus[0]}5` : `${allowedLetters.bus[Math.floor(Math.random() * allowedLetters.bus.length)]}5`;
				errorMessage.textContent = `Slot name must start with a letter followed by a number (e.g., ${example}).`;
				btn.disabled = true;
				return;
			}

			if (currentType === "car" && !validFormat.test(slotName)) {
				// اختيار حرف عشوائي من الحروف المسموح بها للسيارة
				let example = allowedLetters.car.length === 1 ? `${allowedLetters.car[0]}5` : `${allowedLetters.car[Math.floor(Math.random() * allowedLetters.car.length)]}5`;
				errorMessage.textContent = `Slot name must start with a letter followed by a number (e.g., ${example}).`;
				btn.disabled = true;
				return;
			}
			if (currentType === "car" && slotName.toLowerCase() === originalName.toLowerCase()) {
				errorMessage.textContent = "";
				btn.disabled = false;
				return;
			}
			if (currentType === "bus" && slotName.toLowerCase() === originalName.toLowerCase()) {
				errorMessage.textContent = "";
				btn.disabled = false;
				return;
			}
			// ✅ Cancel previous fetch if still pending
			if (abortController) {
				abortController.abort();
			}

			abortController = new AbortController();

			// ✅ Check uniqueness from server
			fetch(`/AdminDashboard/CheckSlotName?name=${encodeURIComponent(slotName)}&id=${slotId}`, {
				signal: abortController.signal
			})
				.then(response => {
					if (!response.ok) {
						throw new Error("HTTP error: " + response.status);
					}
					return response.json();
				})
				.then(data => {
					if (data.exists) {
						errorMessage.textContent = "This slot name is already taken.";
						btn.disabled = true;
					} else {
						errorMessage.textContent = "";
						btn.disabled = false;
					}
				})
				.catch(error => {
					if (error.name !== "AbortError") {
						console.error("Fetch error:", error);
						errorMessage.textContent = "Error checking slot name.";
						btn.disabled = true;
					}
				});
		}

		slotInput.addEventListener("input", validateSlotUpdate);
	});

	function clearInput() {
		setTimeout(() => {
			// مسح القيم داخل الحقول بعد تأخير 500ms
			document.getElementById('slotNameInputforadd').value = '';
			document.getElementById('nameValidationMessage').textContent = '';
			document.getElementById('successMessageDiv').classList.add('d-none');

			// إعادة تعيين نوع الموقف إلى الافتراضي (إذا كنت ترغب في ذلك)
			document.getElementById('btnCar').classList.remove('btn-primary');
			document.getElementById('btnBus').classList.remove('btn-primary');
			document.getElementById('btnCar').classList.add('btn-outline-primary');
			document.getElementById('btnBus').classList.add('btn-outline-danger');
		}, 50);  // تأخير 500ms
	}

	// إضافة حدث لغلق المودال عند الضغط خارج المودال
	$('#addSlotModal').on('hidden.bs.modal', function () {
		clearInput(); // عند غلق المودال يتم مسح القيم
	});


	function openModal(type) {
		document.getElementById("nameValidationMessage").textContent = '';
		document.getElementById("slotNameInputforadd").value = '';
		currentType = type;
		setType(type);
		$('#addSlotModal').modal('show'); // فتح المودال
	}
	
</script>